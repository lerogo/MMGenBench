import argparse
import base64
import io
import json
import os
import numpy as np
import pandas as pd
from PIL import Image
Image.MAX_IMAGE_PIXELS = 1e9


def main(args):
    # read data
    key = args.gen_data.split('/')[-1].split('.tsv')[0]
    prompt_data = pd.read_excel(args.prompt_data)
    gen_data = pd.read_csv(args.gen_data, sep='\t')
    eval_data = json.load(open(args.eval_data, 'r'))

    if args.type == 'test':
        labelIndex = json.load(open(os.path.join(args.data_dir, 'MMGenBench-Test-label-index.json'), 'r'))
        res = {
            'sim': calTestSimScore(eval_data, labelIndex),
            'fid': eval_data['fid']
        }
        ori_data = pd.read_csv(os.path.join(args.data_dir, "MMGenBench-Test.tsv"), sep='\t')

    elif args.type == 'domain':
        ori_data = pd.read_csv(os.path.join(args.data_dir, "MMGenBench-Domain.tsv"), sep='\t')
        res = {
            'sim': {
                'mean': float(np.mean(list(eval_data['sim'].values()))),
                'std': float(np.std(list(eval_data['sim'].values())))
            },
            'fid': eval_data['fid']
        }
    else:
        raise ValueError('Invalid type')

    with open(os.path.join(args.work_dir, f"{key}.json"), 'w') as f:
        json.dump(res, f, indent=4)

    step = 1 if args.type == 'test' else 10
    gen_xlsx(os.path.join(args.work_dir, f"{key}.xlsx"), ori_data, prompt_data, gen_data, step)


def calTestSimScore(data, labelIndex):
    res = {}
    for key in labelIndex:
        simList = []
        for index in labelIndex[key]:
            simList.append(data['sim'][str(index)])
        res[key] = {
            'mean': float(np.mean(simList)),
            'std': float(np.std(simList))
        }

    allSimList = list(data['sim'].values())
    res['all'] = {
        'mean': float(np.mean(allSimList)),
        'std': float(np.std(allSimList))
    }

    return res


def gen_xlsx(savePath, setData, promptData, genData, step=10):
    from openpyxl.utils import get_column_letter
    from openpyxl.drawing.image import Image
    from openpyxl import Workbook

    res = []
    for i in range(0, len(genData), step):
        res.append([promptData['index'][i], promptData['prediction'][i], setData['image'][i], genData['image'][i]])

    wb = Workbook()
    ws = wb.active
    ws.append(['index', 'prompt', 'set', 'gen'])
    for i in range(len(res)):
        ws.append([res[i][0], res[i][1]] + [""] * 2)
        img = decode_base64_to_image(res[i][2])
        width, height = img.size
        img = Image(img)
        img.width = 150
        img.height = 150 * height // width
        ws.column_dimensions[get_column_letter(3)].width = 30
        ws.row_dimensions[i + 2].height = 150 * height // width
        ws.add_image(img, f"{get_column_letter(3)}{i + 2}")

        img = decode_base64_to_image(res[i][3])
        width, height = img.size
        img = Image(img)
        img.width = 150
        img.height = 150 * height // width
        ws.column_dimensions[get_column_letter(4)].width = 30
        ws.row_dimensions[i + 2].height = 150 * height // width
        ws.add_image(img, f"{get_column_letter(4)}{i + 2}")

    wb.save(savePath)
    wb.close()


def decode_base64_to_image(base64_string, target_size=-1):
    image_data = base64.b64decode(base64_string)
    image = Image.open(io.BytesIO(image_data))
    if image.mode in ('RGBA', 'P'):
        image = image.convert('RGB')
    if target_size > 0:
        image.thumbnail((target_size, target_size))
    return image


if __name__ == '__main__':
    parser = argparse.ArgumentParser()
    parser.add_argument('--prompt_data', type=str, required=True, help="Image-Prompt Generated by LMMs")
    parser.add_argument('--gen_data', type=str, required=True, help="Image Generated by Text-to-Image Models")
    parser.add_argument('--eval_data', type=str, required=True, help="Evaluation Metrics Calculated by the Image Representation Model")
    parser.add_argument('--data_dir', default="../MMGenBench-data/", type=str, required=True, help="Data Directory of MMGenBench")

    parser.add_argument('--work-dir', type=str, default='./outputs', help='select the output directory')
    parser.add_argument('--type', type=str, default='test', choices=['test', 'domain'], help='select the type of data')
    args = parser.parse_args()
    if not os.path.exists(args.work_dir):
        os.makedirs(args.work_dir)
    main(args)
